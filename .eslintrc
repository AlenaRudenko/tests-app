{
    "parser": "@typescript-eslint/parser",
    "extends": [
      "eslint:recommended",
      "plugin:import/recommended",
      "plugin:@typescript-eslint/eslint-recommended",
      "plugin:@typescript-eslint/recommended",
      "react-app",
      "prettier",
      "prettier/@typescript-eslint"
    ],
    "plugins": ["@typescript-eslint", "react-hooks", "header", "import"],
    "settings": {
      "react": {
        "version": "detect"
      },
      "import/parsers": {
        "@typescript-eslint/parser": [".ts", ".tsx"]
      },
      "import/resolver": {
        "typescript": {
          "alwaysTryTypes": true, // always try to resolve types under `<root>@types` directory even it doesn't contain any source code, like `@types/unist`
          
          // Choose from one of the "project" configs below or omit to use <root>/tsconfig.json by default
  
          // use <root>/path/to/folder/tsconfig.json
          "project": "path/to/folder"
        }
      }
    },
    "rules": {
      "header/header": [2, "block", [{ "pattern": " \\* Author : .*" }]],
      "@typescript-eslint/consistent-type-definitions": ["warn", "type"],
      "@typescript-eslint/explicit-function-return-type": "off",
      "@typescript-eslint/explicit-member-accessibility": "off",
      "@typescript-eslint/no-angle-bracket-type-assertion": "off",
      "@typescript-eslint/no-non-null-assertion": "off",
      "@typescript-eslint/no-unused-vars": [
        "error",
        {
          "argsIgnorePattern": "^_",
          "ignoreRestSiblings": true
        }
      ],
      "@typescript-eslint/no-use-before-define": [
        "warn",
        {
          "functions": false,
          "classes": false,
          "variables": true
        }
      ],
      "import/no-unresolved": "error",
      "import/no-extraneous-dependencies": "warn",
      "import/order": [
        "warn",
        {
          "newlines-between": "always"
        }
      ],
      "no-case-declarations": "warn",
      "no-console": "warn",
      "no-debugger": "warn",
      "no-else-return": "warn",
      "no-param-reassign": "warn",
      "no-undef": "off",
      "no-unused-vars": "off",
      "no-var": "warn",
      "object-shorthand": "warn",
      "padding-line-between-statements": [
        "warn",
        {
          "blankLine": "always",
          "prev": "*",
          "next": "class"
        },
        {
          "blankLine": "always",
          "prev": "*",
          "next": "for"
        },
        {
          "blankLine": "always",
          "prev": "*",
          "next": "function"
        },
        {
          "blankLine": "always",
          "prev": "*",
          "next": "if"
        },
        {
          "blankLine": "always",
          "prev": "*",
          "next": "return"
        },
        {
          "blankLine": "always",
          "prev": "*",
          "next": "switch"
        },
        {
          "blankLine": "always",
          "prev": "*",
          "next": "try"
        },
        {
          "blankLine": "always",
          "prev": "*",
          "next": "while"
        },
        {
          "blankLine": "always",
          "prev": "block-like",
          "next": ["let", "const"]
        }
      ],
      "prefer-const": "warn",
      "react/jsx-boolean-value": "warn",
      "react/jsx-curly-brace-presence": "warn",
      "react/jsx-key": "warn",
      "react/jsx-sort-props": [
        "warn",
        {
          "callbacksLast": true,
          "reservedFirst": true,
          "shorthandLast": true
        }
      ],
      "react/no-array-index-key": "warn",
      "react/prefer-stateless-function": "warn",
      "react/self-closing-comp": "warn",
      "react-hooks/rules-of-hooks": "error",
      "react-hooks/exhaustive-deps": "off",
      "yoda": "warn"
    }
  }